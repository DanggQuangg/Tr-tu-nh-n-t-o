import tkinter as tk 
from tkinter import ttk
from PIL import Image, ImageTk
import random

def random_state(n=4):
    return [random.randint(0, n-1) for _ in range(n)]

def cost(state):
    n = len(state)
    conflicts = 0
    for i in range(n):
        for j in range(i+1, n):
            if state[i] == state[j] or abs(state[i]-state[j]) == abs(i-j):
                conflicts += 1
    return conflicts

def all_neighbors(state):
    n = len(state)
    neighbors = []
    for row in range(n):
        for col in range(n):
            if col != state[row]:
                new_state = state[:]
                new_state[row] = col
                neighbors.append((new_state, row, col))
    return neighbors

def taobanco_fixed(r, title, n=4, size=360):
    frame = tk.LabelFrame(r, text=title, padx=8, pady=8)
    frame.grid_propagate(False)
    banco = tk.Frame(frame, height=size, width=size, bg="white")
    banco.pack(fill="both", expand=True)
    cells = [[None for _ in range(n)] for _ in range(n)]
    for i in range(n):
        banco.grid_columnconfigure(i, weight=1, uniform="o")
        banco.grid_rowconfigure(i, weight=1, uniform="o")
        for j in range(n):
            color = "black" if (i + j) % 2 else "white"
            cell = tk.Frame(banco, bg=color, borderwidth=1, relief="solid")
            cell.grid(row=i, column=j, sticky="nsew")
            cell.grid_propagate(False)
            cells[i][j] = cell
    return frame, banco, cells

def veoco_fixed(cells, state=None, queenimg=None, highlight=None):
    n = len(cells)
    for i in range(n):
        for j in range(n):
            for w in cells[i][j].winfo_children():
                w.destroy()
            cells[i][j]["highlightbackground"] = "black"
            cells[i][j]["highlightthickness"] = 1

    if state:
        for row, col in enumerate(state):
            if queenimg:
                tk.Label(cells[row][col], image=queenimg, bg=cells[row][col]["bg"]).pack(expand=True)
            else:
                color = cells[row][col]["bg"]
                fg = "white" if color == "black" else "black"
                tk.Label(cells[row][col], text="Q", font=("Arial",28,"bold"), fg=fg, bg=color).pack(expand=True)

    if highlight:
        i, j = highlight
        cells[i][j]["highlightbackground"] = "yellow"
        cells[i][j]["highlightthickness"] = 3


root = tk.Tk()
root.title("4 Hậu – Beam Search")
root.grid_columnconfigure(0, weight=1, uniform="khung")
root.grid_columnconfigure(1, weight=1, uniform="khung")
root.grid_rowconfigure(0, weight=1)

khungtrai, _, cells_trai = taobanco_fixed(root, "Một state trong Beam", n=4)
khungphai, _, cells_phai = taobanco_fixed(root, "State tốt nhất", n=4)
khungtrai.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
khungphai.grid(row=0, column=1, sticky="nsew", padx=10, pady=10)

hau = ImageTk.PhotoImage(Image.open("queen.jpg").resize((64, 64)))

beam_width = 3
beam = []
step_count = 0
running = False
delay = 1000

frame_log = tk.LabelFrame(root, text="Log chạy Beam Search", padx=5, pady=5)
frame_log.grid(row=2, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)

columns = ("Step", "Cost", "BeamStates")
tree = ttk.Treeview(frame_log, columns=columns, show="headings", height=8)
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, width=120, anchor="center")
tree.pack(fill="both", expand=True)

def run_step():
    global beam, running, step_count
    if not running:
        return

    step_count += 1
    candidates = []
    for state in beam:
        candidates.extend(all_neighbors(state))
    candidates.sort(key=lambda x: cost(x[0]))
    beam = [s for s, _, _ in candidates[:beam_width]]
    veoco_fixed(cells_trai, beam[0], hau)
    veoco_fixed(cells_phai, beam[0], hau)
    lbl_info.config(text=f"Step={step_count}, best cost={cost(beam[0])}")

    tree.insert("", "end", values=(step_count, cost(beam[0]), len(beam)))

    if cost(beam[0]) == 0:
        running = False
        btn_start.config(text="Đã dừng (Tìm thấy nghiệm)")
        return

    root.after(delay, run_step)

def start():
    global beam, running, step_count
    step_count = 0
    beam = [random_state(4) for _ in range(beam_width)]
    veoco_fixed(cells_trai, beam[0], hau)
    veoco_fixed(cells_phai, beam[0], hau)
    lbl_info.config(text=f"Khởi tạo Beam width={beam_width}")
    for i in tree.get_children():
        tree.delete(i)  
    running = True
    btn_start.config(text="Đang chạy")
    run_step()

def stop():
    global running
    running = False
    btn_start.config(text="Bắt đầu")

toolbar = tk.Frame(root)
toolbar.grid(row=1, column=0, columnspan=2, pady=(5,5))

btn_start = tk.Button(toolbar, text="Bắt đầu", command=start)
btn_start.pack(side="left", padx=5)

btn_stop = tk.Button(toolbar, text="Dừng", command=stop)
btn_stop.pack(side="left", padx=5)

lbl_info = tk.Label(toolbar, text="Thông tin")
lbl_info.pack(side="left", padx=15)

root.minsize(800,700)
root.mainloop()
